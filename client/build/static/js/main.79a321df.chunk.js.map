{"version":3,"sources":["components/tweets.js","redux/ruleAction.js","App.js","serviceWorker.js","redux/index.js","index.js"],"names":["useStyles","makeStyles","search","display","backgroundColor","alignItems","justifyContent","marginLeft","Tweets","status","msec","Date","created_at","day","Math","floor","hh","mm","ss","time","subheader","entities","user_mentions","length","forEach","user","screen_name","Card","style","CardHeader","avatar","Avatar","alt","src","profile_image_url_https","title","name","text","CardContent","Typography","padding","variant","component","media","CardMedia","height","width","margin","image","media_url_https","CardActions","IconButton","loadedDataCount","data","type","payload","root","App","classes","useState","searchInput","setSearchInput","notificationBadge","setNotificationBadge","statuses","setStatuses","isLoading","setLoading","dispatch","useDispatch","loadCount","useSelector","state","loaded","AppBar","position","Toolbar","edge","color","aria-label","className","InputBase","value","onChange","event","target","placeholder","onKeyDown","key","Axios","get","then","res","splice","catch","err","console","log","Badge","badgeContent","Grid","container","direction","justify","spacing","marginTop","map","item","xs","md","Button","onClick","CircularProgress","Boolean","window","location","hostname","match","initial","search_metadata","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.79a321df.chunk.js","sourcesContent":["import React from 'react';\nimport {Typography, IconButton, Card, CardHeader, Avatar, CardContent, CardActions, CardMedia } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ChatBubbleOutlineIcon from '@material-ui/icons/ChatBubbleOutline';\nimport RepeatIcon from '@material-ui/icons/Repeat';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport SystemUpdateAltIcon from '@material-ui/icons/SystemUpdateAlt';\nconst useStyles = makeStyles({\n  search:{\n    display:'flex',\n    backgroundColor: 'white',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginLeft: '10px'\n  }\n})\n\nfunction Tweets({status}) {\n  const classes = useStyles();\n  let msec= new Date()-new Date(status.created_at);\n  let day = Math.floor(msec / 1000 / 60 / 60 / 24);\n  msec -= day * 1000 * 60 * 60 * 24\n  let hh = Math.floor(msec / 1000 / 60 / 60);\n  msec -= hh * 1000 * 60 * 60;\n  let mm = Math.floor(msec / 1000 / 60);\n  msec -= mm * 1000 * 60;\n  let ss = Math.floor(msec / 1000);\n  msec -= ss * 1000;\n  let time = day>=1 ? day+'d' : 24>hh && hh>=1 ? hh+'h' : 60>mm && mm>=1 ? mm+'m' : ss+'s'\n  let subheader=status.entities.user_mentions!=0 ? 'Replying to': null;\n  if(status.entities.user_mentions.length!=0){\n    status.entities.user_mentions.forEach(user=>{\n        subheader+=' '+'@'+user.screen_name\n    })\n  }  \n  return (\n    <div>\n        <Card style={{backgroundColor:'#fafafa'}}>\n                <CardHeader\n                    avatar={\n                        <Avatar alt='avatar' src={status.user.profile_image_url_https}/>\n                    }\n                    title={status.user.name+' '+'@'+status.user.screen_name+' '+'-'+' '+time}\n                    subheader={subheader}\n                />\n                {\n                    status.text ? <CardContent>\n                    <Typography style={{padding:'0px 40px'}} variant=\"body2\"  component=\"p\">\n                        {status.text}\n                    </Typography>\n                </CardContent> : null\n                }\n                {\n                    status.entities.media && status.entities.media.length!=0 ? <CardMedia\n                    style={{height: 300,width: 400,margin:'0px 60px'}}\n                    image={status.entities.media[0].media_url_https}\n                    /> : null\n                }\n                <CardActions style={{display:'flex',justifyContent:'space-around'}}>\n                    <IconButton >\n                        <ChatBubbleOutlineIcon/>\n                    </IconButton>\n                    <IconButton >\n                        <RepeatIcon/>\n                    </IconButton>\n                    <IconButton >\n                        <FavoriteBorderIcon/>\n                    </IconButton>\n                    <IconButton >\n                        <SystemUpdateAltIcon/>\n                    </IconButton>\n                </CardActions>\n            </Card>\n    </div>\n  );\n}\n\nexport default Tweets;\n","export const addSearchedData=data=>{\n    return {\n        type:'ADD-DATA',\n        payload:data\n    }\n}\nexport const loadedDataCount=data=>{\n    return {\n        type:'ADD-LOADED-COUNT',\n        payload:data\n    }\n}","import React,{useState} from 'react';\nimport './App.css';\nimport { AppBar, Toolbar, Typography, IconButton, Card, Grid, Paper, Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TwitterIcon from '@material-ui/icons/Twitter';\nimport InputBase from '@material-ui/core/InputBase';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Badge from '@material-ui/core/Badge';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport Axios from 'axios';\nimport Tweets from './components/tweets'\nimport {useSelector,useDispatch} from 'react-redux';\nimport {addSearchedData,loadedDataCount} from './redux/ruleAction';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nconst useStyles = makeStyles({\n  root:{\n    backgroundColor:'black'\n  },\n  search:{\n    display:'flex',\n    backgroundColor: 'white',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginLeft: '10px'\n  }\n})\n\nfunction App() {\n  const classes = useStyles();\n  const [searchInput,setSearchInput]=useState('');\n  const [notificationBadge,setNotificationBadge]=useState('0');\n  const [statuses,setStatuses]=useState([]);\n  const [isLoading,setLoading]=useState(false)\n  const dispatch=useDispatch();\n  const allStatuses=useSelector(state=>state.statuses);\n  const loadCount=useSelector(state=>state.loaded);    // the total no. of tweets loaded count value is being retrieved from redux store; \n  const onSubmitSearch=(event)=>{\n    if (event.key === 'Enter') {\n      setLoading(true)\n      Axios.get(`/search?search=${event.target.value}&count=${100}`)\n      .then(res=>{\n                  setLoading(false)\n                  dispatch(addSearchedData(res.data));\n                  dispatch(loadedDataCount(25));\n                  let {statuses}=res.data\n                  statuses=statuses.splice(0,25)\n                  setStatuses(statuses);\n                  setNotificationBadge(statuses.length)}).catch(err=>{setLoading(false);console.log(err)})\n    }\n  }\n  const handleLoadMore=()=>{\n    // let newStatuses=allStatuses.splice(loadCount,10);\n    // setStatuses([...statuses,...newStatuses]);\n    // setNotificationBadge(newStatuses.length);\n    setLoading(true);\n    Axios.get(`/loadmore?search=${searchInput}&skip=${loadCount}`)\n    .then(res=>{\n      setLoading(false);\n      let {data}=res;\n      setStatuses([...statuses,...data.statuses]);\n      dispatch(loadedDataCount(loadCount+data.statuses.length));\n      setNotificationBadge(data.statuses.length)\n    }).catch(err=>{setLoading(false);console.log(err)})\n  }\n  return (\n    <div>\n      <AppBar position=\"fixed\">\n       <Toolbar>\n        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n          <TwitterIcon/>\n        </IconButton>\n          <Typography variant=\"h5\">\n         Twitter Clone\n       </Typography>\n       <div className={classes.search}>\n        <SearchIcon color='primary'/>\n        <InputBase value={searchInput} onChange={event=>setSearchInput(event.target.value)} placeholder=\"search and press Enter\" color='primary' onKeyDown={onSubmitSearch}/>\n       </div>\n       <IconButton color=\"inherit\" style={{marginLeft: 'auto'}}>\n        <Badge badgeContent={'+'+notificationBadge} color=\"secondary\">\n          <NotificationsIcon />\n        </Badge>\n        </IconButton>\n      </Toolbar>\n     </AppBar>\n     <Grid container\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"center\" \n        spacing={5} style={{ marginTop:'50px'}}>\n        {\n          statuses.map(status=>(\n            <Grid item xs={12} md={12} style={{margin: 'auto', width: 530,padding:10}}>\n              <Tweets status={status}/>\n            </Grid>\n          ))\n        }\n      <Grid item xs={12} md={12} style={{margin: 'auto',padding:20}}>\n      {\n        statuses.length!=0 ? \n          <Button onClick={handleLoadMore} style={{margin:'0 auto'}}>\n          {\n            isLoading ? <CircularProgress /> : 'Load More'\n          }\n        </Button> : isLoading ? <CircularProgress /> : <Typography style={{margin:'0 auto'}}>\n          Nothing to show please search something!!!\n        </Typography>\n      }\n      </Grid>\n\n      </Grid>\n   \n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initial={\n    statuses:[],\n    search_metadata:{},\n    loaded:0\n}\n\nexport default function rootReducer(state=initial,{type,payload}){\n    switch(type){\n        case 'ADD-DATA':\n            return {...payload};\n        case 'ADD-LOADED-COUNT':\n            let loadCount=state.loaded ? state.loaded+payload : payload\n            return {...state, loadCount}\n        default:\n            return state;\n}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport rootReducer from './redux'\nconst store=createStore(rootReducer);\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}